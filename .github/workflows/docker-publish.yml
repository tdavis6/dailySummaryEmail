name: Release on Push to Main Branch

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch
      - dev   # Trigger on pushes to the dev branch

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is fetched

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Extract version from version.json
        id: get_version
        run: |
          # Extract the original version and prepare a Docker-compatible tag
          VERSION=$(jq -r '.version' version.json)
          DOCKER_TAG=$(echo "$VERSION" | sed 's/^v//' | sed 's/+/-/g')
          # Convert repository name to lowercase for Docker compatibility
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_ENV
          echo "repo_name=$REPO_NAME" >> $GITHUB_ENV

      - name: Determine if Pre-release and Type
        id: prerelease_check
        run: |
          # Check if the version is a pre-release and determine type
          if [[ "${{ env.version }}" == *"-alpha"* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=alpha" >> $GITHUB_ENV
          elif [[ "${{ env.version }}" == *"-beta"* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=beta" >> $GITHUB_ENV
          elif [[ "${{ env.version }}" == *"-rc"* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=rc" >> $GITHUB_ENV
          elif [[ "${{ env.version }}" =~ ^v0\..* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=dev" >> $GITHUB_ENV
          else
            echo "pre_release=false" >> $GITHUB_ENV
            echo "pre_release_type=" >> $GITHUB_ENV
          fi

      - name: Get All Relevant Commit Messages for Release Notes
        id: commit_messages
        run: |
          # Find the last stable (non-pre-release) tag
          LAST_STABLE_TAG=$(git tag -l | grep -E '^v[0-9]+(\.[0-9]+)*$' | sort -V | tail -1)
          # Get commits from the last stable tag up to the current release, formatting each on a new line
          COMMITS=$(git log "$LAST_STABLE_TAG"..HEAD --pretty=format:"* %s" | sed 's/[^[:print:]]//g')
          # Sanitize commit messages to escape special characters
          COMMITS=$(echo "$COMMITS" | sed 's/[&]/\\&/g; s/\\/\\\\/g; s/`/\\`/g; s/\*/\\*/g; s/"/\\"/g; s/\$/\\\$/g; s/\(/\\(/g; s/\)/\\)/g; s/\[/\\[/g; s/\]/\\]/g; s/\|/\\|/g')
          echo "commits=${COMMITS}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          prerelease: ${{ env.pre_release }}  # Use pre_release determined from the version
          body: |
            Automated release of version ${{ env.version }}

            ### Commits in this release:
            ${{ env.commits }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Build and Push Docker Image
        run: |
          # Build the Docker image with the version-specific tag
          docker build -t ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} .
          
          # Apply the latest-dev tag for all releases, regardless of stability
          docker tag ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} ghcr.io/${{ env.repo_name }}:latest-dev
          docker push ghcr.io/${{ env.repo_name }}:latest-dev

          # Apply tags based on the version type
          if [ "${{ env.pre_release }}" = "true" ]; then
            # Apply specific pre-release tags for alpha, beta, rc, and general dev
            if [ "${{ env.pre_release_type }}" == "alpha" ]; then
              docker tag ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} ghcr.io/${{ env.repo_name }}:latest-alpha
              docker push ghcr.io/${{ env.repo_name }}:latest-alpha
            elif [ "${{ env.pre_release_type }}" == "beta" ]; then
              docker tag ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} ghcr.io/${{ env.repo_name }}:latest-beta
              docker push ghcr.io/${{ env.repo_name }}:latest-beta
            elif [ "${{ env.pre_release_type }}" == "rc" ]; then
              docker tag ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} ghcr.io/${{ env.repo_name }}:latest-rc
              docker push ghcr.io/${{ env.repo_name }}:latest-rc
            fi
          fi
          
          # If on the main branch and not a pre-release, apply the latest tag
          if [ "${{ github.ref }}" == "refs/heads/main" ] && [ "${{ env.pre_release }}" = "false" ]; then
            docker tag ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} ghcr.io/${{ env.repo_name }}:latest
            docker push ghcr.io/${{ env.repo_name }}:latest
          fi

          # Push the version-specific tag
          docker push ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }}
