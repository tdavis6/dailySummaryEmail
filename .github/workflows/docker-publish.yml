name: Release on Push to Main Branch

on:
  push:
    branches:
      - main
      - dev

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      version: v1.3.0-beta.31
      docker_tag: 1.3.0-beta.31
      repo_name: tdavis6/dailysummaryemail
      pre_release: true
      pre_release_type: beta

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}

      - name: Extract version from version.json
        id: get_version
        run: |
          VERSION=$(jq -r '.version' version.json)
          DOCKER_TAG=$(echo "$VERSION" | sed 's/^v//' | sed 's/+/-/g')
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "docker_tag=$DOCKER_TAG" >> $GITHUB_ENV
          echo "repo_name=$REPO_NAME" >> $GITHUB_ENV

      - name: Determine if Pre-release and Type
        id: prerelease_check
        run: |
          if [[ "${{ env.version }}" == *"-alpha"* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=alpha" >> $GITHUB_ENV
          elif [[ "${{ env.version }}" == *"-beta"* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=beta" >> $GITHUB_ENV
          elif [[ "${{ env.version }}" == *"-rc"* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=rc" >> $GITHUB_ENV
          elif [[ "${{ env.version }}" =~ ^v0\..* ]]; then
            echo "pre_release=true" >> $GITHUB_ENV
            echo "pre_release_type=dev" >> $GITHUB_ENV
          else
            echo "pre_release=false" >> $GITHUB_ENV
            echo "pre_release_type=" >> $GITHUB_ENV
          fi

      - name: Get All Relevant Commit Messages for Release Notes
        id: commit_messages
        run: |
          LAST_STABLE_TAG=$(git tag -l | grep -E '^v[0-9]+(\.[0-9]+)*$' | sort -V | tail -1)
          echo "Last stable tag: $LAST_STABLE_TAG"

          COMMITS=$(git log "$LAST_STABLE_TAG"..HEAD --pretty=format:"* %h: %s")
          echo "Raw commit messages: $COMMITS"

          # Check if COMMITS is non-empty
          if [ -n "$COMMITS" ]; then
            echo "Commit messages are not empty"

            # Escape problematic characters for use in environment variables
            SANITIZED_COMMITS=$(printf "%s\n" "$COMMITS" | sed -E \
              -e 's/\\/\\\\/g' \
              -e 's/"/\\"/g' \
              -e 's/`/\\`/g' \
              -e 's/\*/\\*/g' \
              -e 's/\$/\\\$/g' \
              -e 's/\(/\\(/g' \
              -e 's/\)/\\)/g' \
              -e 's/\[/\\[/g' \
              -e 's/\]/\\]/g' \
              -e 's/\|/\\|/g' \
              -e 's/\{/\\\{/g' \
              -e 's/\}/\\\}/g' \
              -e 's/&/\\&/g' \
              -e 's/'\''/\\'\''/g' \
              -e ':a;N;$!ba;s/\n/\\n/g')
          
            echo "Sanitized commit messages: $SANITIZED_COMMITS"
          
            # Print sanitized commit messages to debug
            echo "SANITIZED_COMMITS=\"$SANITIZED_COMMITS\""

            # Safely output to GITHUB_ENV
            echo "SANITIZED_COMMITS=\"$SANITIZED_COMMITS\"" >> $GITHUB_ENV
          else
            echo "No commits found since the last stable tag."
            echo "SANITIZED_COMMITS=\"No commits since the last stable tag.\"" >> $GITHUB_ENV
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.version }}
          release_name: ${{ env.version }}
          prerelease: ${{ env.pre_release }}  # Use pre_release determined from the version
          body: |
            Automated release of version ${{ env.version }}

            ### Commits in this release:
            ${{ env.commits }}
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Build and Push Docker Image
        run: |
          # Build the Docker image with the version-specific tag
          docker build -t ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} .
          
          # Apply the latest-dev tag for all releases, regardless of stability
          docker tag ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }} ghcr.io/${{ env.repo_name }}:latest-dev

          # Push both tags to the GitHub Container Registry
          docker push ghcr.io/${{ env.repo_name }}:${{ env.docker_tag }}
          docker push ghcr.io/${{ env.repo_name }}:latest-dev
