import re
import logging
from datetime import datetime, timedelta

def add_emojis(text):
    """Adds emojis to individual tasks in the text based on lateness, with a default due date of today if not specified."""
    emoji_map = {
        # Meals
        "breakfast": "üç≥",
        "lunch": "üçΩÔ∏è",
        "dinner": "üçΩÔ∏è",
        "snack": "üçø",
        "coffee": "‚òï",
        "tea": "üçµ",
        "water": "üíß",

        # Academic & Work
        "class": "üìö",
        "study": "üìñ",
        "exam": "üìù",
        "project": "üöÄ",
        "assignment": "üìÑ",
        "homework": "üìù",
        "presentation": "üìä",
        "meeting": "üìÖ",
        "deadline": "‚è∞",
        "work": "üíº",
        "task": "‚úÖ",
        "priority": "‚ùó",
        "schedule": "üóìÔ∏è",
        "appointment": "üìÖ",
        "research": "üîç",
        "lecture": "üéì",
        "lab": "üî¨",
        "experiment": "‚öóÔ∏è",
        "training": "üìà",
        "goal": "üéØ",

        # Personal Care & Health
        "exercise": "üèãÔ∏è",
        "workout": "üí™",
        "yoga": "üßò",
        "meditation": "üßò",
        "run": "üèÉ",
        "walk": "üö∂",
        "doctor": "üë®‚Äç‚öïÔ∏è",
        "medicine": "üíä",
        "pill": "üíä",
        "vitamins": "üíä",
        "dentist": "ü¶∑",
        "shower": "üöø",
        "bath": "üõÅ",
        "sleep": "üí§",
        "rest": "üò¥",

        # Events & Social
        "birthday": "üéÇ",
        "party": "üéâ",
        "celebration": "üéä",
        "anniversary": "üíç",
        "holiday": "üéà",
        "vacation": "üèñÔ∏è",
        "travel": "‚úàÔ∏è",
        "trip": "üåç",
        "concert": "üéµ",
        "movie": "üé¨",
        "dinner party": "üç≤",

        # Daily & Household
        "cleaning": "üßπ",
        "laundry": "üß∫",
        "grocery": "üõí",
        "shopping": "üõçÔ∏è",
        "cook": "üë©‚Äçüç≥",
        "bake": "üç™",
        "garden": "üå±",
        "repair": "üîß",
        "maintenance": "üõ†Ô∏è",
        "bill": "üíµ",
        "pay": "üí≥",
        "organize": "üìÇ",
        "declutter": "üóëÔ∏è",
        "car": "üöó",
        "fuel": "‚õΩ",

        # Technology & Communication
        "email": "üìß",
        "message": "üí¨",
        "call": "üìû",
        "phone": "üì±",
        "zoom": "üíª",
        "computer": "üíª",
        "update": "üîÑ",
        "backup": "üíæ",
        "upload": "‚¨ÜÔ∏è",
        "download": "‚¨áÔ∏è",
        "wifi": "üì∂",
        "internet": "üåê",
        "website": "üîó",
        "link": "üîó",
        "password": "üîí",

        # Leisure & Entertainment
        "reading": "üìñ",
        "book": "üìö",
        "puzzle": "üß©",
        "game": "üéÆ",
        "sports": "üèÖ",
        "hiking": "ü•æ",
        "cycling": "üö¥",
        "swimming": "üèä",
        "photography": "üì∏",
        "painting": "üé®",
        "write": "‚úçÔ∏è",
        "journal": "üìì",
        "music": "üé∂",
        "dance": "üíÉ",

        # Emotions & Well-being
        "important": "‚≠ê",
        "urgent": "‚ö†Ô∏è",
        "focus": "üîç",
        "celebrate": "üéâ",
        "relax": "üå¥",
        "self-care": "üíÜ",
        "therapy": "üß†",
        "gratitude": "üôè",
        "achievement": "üèÜ",
        "success": "üèÜ",
        "love": "‚ù§Ô∏è",
        "friend": "üë´",
        "family": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",

        # Miscellaneous
        "question": "‚ùì",
        "idea": "üí°",
        "reminder": "üîî",
        "new": "üÜï",
        "save": "üíæ",
        "charge": "üîã",
        "gift": "üéÅ",
        "list": "üìù",
        "complete": "‚úÖ",
        "incomplete": "‚ùå",
        "check": "‚úîÔ∏è",
        "location": "üìç",

        # Weather Conditions
        "sunny": "‚òÄÔ∏è",
        "clear": "üåû",
        "cloudy": "‚òÅÔ∏è",
        "overcast": "üå•Ô∏è",
        "rain": "üåßÔ∏è",
        "showers": "üå¶Ô∏è",
        "storm": "üå©Ô∏è",
        "thunderstorm": "‚õàÔ∏è",
        "snow": "‚ùÑÔ∏è",
        "hail": "üå®Ô∏è",
        "windy": "üí®",
        "fog": "üå´Ô∏è",
        "mist": "üå´Ô∏è",
        "drizzle": "üå¶Ô∏è",
        "frost": "‚ùÑÔ∏è",
        "hot": "üî•",
        "cold": "ü•∂",
        "tornado": "üå™Ô∏è",
        "hurricane": "üåÄ",
    }

    logging.debug("Starting add_emojis function.")

    # Separate header from tasks, skipping any initial blank lines
    lines = text.strip().splitlines()
    header = None

    # Find the first non-blank line to use as the header
    for i, line in enumerate(lines):
        if line.strip():  # Non-blank line found
            header = line
            tasks = lines[i+1:]  # Remaining lines are tasks
            break

    # Helper function to replace keywords with corresponding emojis
    def replace_with_emoji(match):
        word = match.group()
        key = match.group().lower()
        emoji = emoji_map.get(key, emoji_map.get(key.rstrip('s'), ''))  # Handle plurals
        if key.endswith('s') and not emoji:
            emoji = emoji_map.get(key[:-1], '')
        logging.debug(f"Replacing '{word}' with '{emoji}' emoji.")
        return f"{word} {emoji}"

    # Apply emoji replacements for keywords
    for keyword in list(emoji_map.keys()) + [k + 's' for k in emoji_map.keys()]:
        tasks = [re.sub(rf"\b{keyword}\b", replace_with_emoji, task, flags=re.IGNORECASE) for task in tasks]

    updated_tasks = []

    # Define the regex to capture due date information in each task
    date_pattern = (
        r"due at (\d{1,2}:\d{2} (?:AM|PM)) on ([A-Za-z]+, [A-Za-z]+ \d{1,2}, \d{4})"
        r"|due on ([A-Za-z]+, [A-Za-z]+ \d{1,2}, \d{4})"
        r"|due at (\d{1,2}:\d{2} (?:AM|PM))"
    )

    for task in tasks:
        if task.isupper() or "conditions:" in task.lower():
            logging.info("Skipping header or line with 'Conditions:'.")
            continue

        match = re.search(date_pattern, task)
        due_date = datetime.now() if not match else datetime.strptime(match.group(2) or match.group(3), "%A, %B %d, %Y")

        days_late = (datetime.now() - due_date).days
        if days_late > 0:
            task += " ‚ö†Ô∏è" if days_late <= 7 else " üî•"

        updated_tasks.append(task)

    # Combine header and updated tasks into final output
    final_text = "\n".join([header] + updated_tasks) if header else "\n".join(updated_tasks)
    logging.debug("Completed add_emojis function.")
    return final_text
